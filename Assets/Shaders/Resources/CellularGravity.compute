
#define GROUPSIZE 128

#define EPSILON 5.96e-08

//////////////////////////////////////////////////////////////////////////////////////

struct Cell
{
    float  mass;
	float2 vel;		
	float2 force;
};

struct RowStats
{
    float maxMass;
    float maxVel;
    float totalMass;
};

RWStructuredBuffer<Cell> inCellBuffer;
RWStructuredBuffer<Cell> outCellBuffer;
RWStructuredBuffer<Cell> inOutCellBuffer;
RWStructuredBuffer<RowStats> outRowStatsBuffer;
RWStructuredBuffer<float3> inMassSATBuffer;
RWStructuredBuffer<float3> outMassSATBuffer;
RWStructuredBuffer<float3> inOutMassSATBuffer;
RWStructuredBuffer<float4> inOutCellRectBuffer;
RWStructuredBuffer<int> inOutMassPropagationBuffer;
RWStructuredBuffer<float> filterWeights;
RWTexture2D<half4> renderTexture; 

float gravity;
float cellSize;
float cellArea;
float deltaTime;
float density;
int width;
int height;
int numMassPropagationIndices;


//////////////////////////////////////////////////////////////////////////////////////
 
 float2 GravityForce(float2 p0, float m0, float2 p1, float m1)
 {
    float2 dir = p1 - p0;
    float r = length(dir);
    if (r > EPSILON )
    {
        dir *= 1.0f / r;
        r = max( r, 1.0 ); // yep!  
        return dir * (m0 * m1 * gravity / ( r * r ));
    }
    else
    {
        return float2( 0, 0 );
    } 
}

float LogToLinear(float value, float minLog, float maxLog, float minLinear, float linearMultiplicator)
{
    if( value < minLog )
    {
        return lerp( 0.0, minLinear, value/minLog );
    }
    else
    {
        float logValue0 = minLog;
        float logValue1 = minLog * 10;
        float linearValue0 = minLinear;
        float linearValue1 = minLinear * linearMultiplicator;
        
        while( value > logValue1 && logValue1 * 10 < maxLog )
        {
            logValue0 = logValue1;
            logValue1 *= 10;
            linearValue0 = linearValue1;
            linearValue1 *= linearMultiplicator;
        }
        
        return lerp( linearValue0, linearValue1, (value - logValue0)/(logValue1 - logValue0) );
    }  
}

float Angle(float2 from, float2 to)
{
    float fromSqrMag = from.x*from.x + from.y*from.y;
    float toSqrMag = to.x*to.x + to.y*to.y;

    float num = sqrt( fromSqrMag * toSqrMag);
    if ( num < 5.96E-08 )
    {
        return 0.0f;
    }
    return acos( clamp( dot(from, to) / num, -1.0, 1.0) ) * 57.29578;
}

float Angle360(float2 from, float2 to)
{
    float signedAngle = Angle(from, to) * sign( from.x * to.y - from.y * to.x);
    if( signedAngle < 0 )
    {
        return 360 + signedAngle;
    }
    else
    {
        return signedAngle;
    }
}

float3 HSV2RGB(float3 c)
{
    float4 K = float4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);
    float3 p = abs(frac(c.xxx + K.xyz) * 6.0 - K.www);
    return c.z * lerp(K.xxx, clamp(p - K.xxx, 0.0, 1.0), c.y);
}

half4 DrawLegend(int x, int y, float legendScale, half4 pixelValue)
{
    float2 uv = float2( x * 1.0 / width, y * 1.0 / height );
    if( uv.x < legendScale && uv.y < legendScale )
    {
        float2 uvc = float2( legendScale/2, legendScale/2 );
        float2 duv = uv - uvc;
        float duvMag = length(duv);
        duv = normalize(duv);
        if( duvMag <= legendScale/2 )
        {
            float hue = Angle360( duv, float2(1,0) ) / 360;
            float value = duvMag / (legendScale/2);
            float sqrtValue = sqrt(value);
            float easing = smoothstep( 0.5, 0.6, value ) * ( 1.0 - smoothstep( 0.9, 1.0, value ) );
                
            return lerp( pixelValue, half4( HSV2RGB( float3(hue,1,sqrtValue) ), 1 ), value * easing ); 
        }
        else
        {
            return pixelValue;
        }   
    }
    else
    {
        return pixelValue;
    }
}

//////////////////////////////////////////////////////////////////////////////////////

#pragma kernel ComputeGravityForceWithSAT

[numthreads(GROUPSIZE,1,1)]
void ComputeGravityForceWithSAT(uint3 id : SV_DispatchThreadID)
{
    int i = int(id.x);
    
    int length0 = width * height;
    
    if( i < length0 )
    {     
        int width0 = width;
        int height0 = height;
                     
        int y0 = i / width0;
        int x0 = i - y0 * width0;

        float2 p0 = float2( x0 * cellSize + cellSize / 2, y0 * cellSize + cellSize / 2 );
        float m0 = inOutCellBuffer[i].mass;

        float2 force = float2( 0, 0 );
    
        /* this is doubtful, considering mass transit between neighbor cells */
        /*                    
        for (int dy0 = -1; dy0 <= 1; dy0++)
        {
            for (int dx0 = -1; dx0 <= 1; dx0++)
            {
                if ( !(dy0 == 0 && dx0 == 0) )
                {
                    int y1 = y0 + dy0;
                    int x1 = x0 + dx0;
                        
                    if (x1 >= 0 && x1 < width0 && y1 >= 0 && y1 < height0)
                    {
                        int j = y1 * width0 + x1;
                        
                        float2 p1 = float2( x1 * cellSize + cellSize / 2, y1 * cellSize + cellSize / 2 );
                        float m1 = inOutCellBuffer[j].mass;
                        force += GravityForce( p0, m0, p1, m1 );
                    }                        
                }
            }
        }
        */
                
        int offset = 3;
        int maxOffset = max(width,height);                
        while( offset <= maxOffset )
        {
            int halfOffset = offset / 2;
        
            for (int dy0 = -1; dy0 <= 1; dy0++)
            {
                for (int dx0 = -1; dx0 <= 1; dx0++)
                {                
                    if ( !(dy0 == 0 && dx0 == 0) )
                    {
                        int y1 = y0 + dy0 * offset;
                        int x1 = x0 + dx0 * offset;
                        
                        int yMin = max( 0, y1 - halfOffset - 1 );
                        int xMin = max( 0, x1 - halfOffset - 1 );                        
                        int yMax = min( height0 - 1, y1 + halfOffset );
                        int xMax = min( width0 - 1, x1 + halfOffset );
                        
                        if( yMin < yMax && xMin < xMax )
                        {
                            int iMinMin = yMin * width0 + xMin;
                            int iMaxMin = yMin * width0 + xMax;
                            int iMaxMax = yMax * width0 + xMax;
                            int iMinMax = yMax * width0 + xMin;                                   
                                                    
                            float3 massSATSample = inOutMassSATBuffer[iMaxMax] -
                                                   inOutMassSATBuffer[iMinMax] -                                                     
                                                   inOutMassSATBuffer[iMaxMin] +
                                                   inOutMassSATBuffer[iMinMin];
                                  
                            float virtualCellMass = massSATSample.x;
                            float virtualCellWeight = massSATSample.x + (xMax-xMin)*(yMax-yMin);                            
                            float2 virtualCellPos = massSATSample.yz;
                            virtualCellPos = virtualCellPos / virtualCellWeight;
                            
                            /* 
                            float lx = (xMin+1) * cellSize + cellSize / 2;
                            float rx = xMax * cellSize + cellSize / 2;
                            float ty = (yMin+1) * cellSize + cellSize / 2;
                            float by = yMax * cellSize + cellSize / 2;
                            
                            virtualCellPos = ( float2(lx,ty) +
                                                      float2(rx,ty) +
                                                      float2(rx,by) +
                                                      float2(lx,by) ) / 4; 
                            */
                                                     
                            force += GravityForce( p0, m0, virtualCellPos, virtualCellMass );                                                   
                        }
                    }
                }
            }
            
            offset *= 3;
        }
                
        inOutCellBuffer[i].force = force;
    }
}

//////////////////////////////////////////////////////////////////////////////////////

#pragma kernel CleanupMassPropagationBuffer

[numthreads(GROUPSIZE,1,1)]
void CleanupMassPropagationBuffer(uint3 id : SV_DispatchThreadID)
{
    int i = int(id.x);  
    
    if( i < width*height )
    {   
        int stride = numMassPropagationIndices+1;
        int offset = i * stride;         
        for( int j = 0; j<stride; j++ )
        {
            inOutMassPropagationBuffer[offset+j] = 0;
        }     
    }
}

//////////////////////////////////////////////////////////////////////////////////////

#pragma kernel MassPropagationPrepass

float4 EvaluateRK4(float4 initial, float dt, float4 d, float2 acceleration)
{
    float4 state = initial + d * dt;    
    return float4( state.zw, acceleration );
}

[numthreads(GROUPSIZE,1,1)]
void MassPropagationPrepass(uint3 id : SV_DispatchThreadID)
{
    int i = int(id.x);  
    
    if( i < width*height )
    {
        int y = i / width;
        int x = i - y * width;
        
        float cellExtents = float2( cellSize, cellSize );
        float cellHalfExtents = cellExtents / 2;
        
        //float2 cellOffset = inCellBuffer[i].vel * deltaTime;
        float2 cellOffset = 0;
        if( inCellBuffer[i].mass > EPSILON )
        {
            float2 acceleration = inCellBuffer[i].force / inCellBuffer[i].mass; 
            float4 state = float4( float2(0,0), inCellBuffer[i].vel );           
            float4 a = EvaluateRK4( state, 0.0, float4( 0,0,0,0 ), acceleration );
            float4 b = EvaluateRK4( state, deltaTime*0.5f, a, acceleration );
            float4 c = EvaluateRK4( state, deltaTime*0.5f, b, acceleration );
            float4 d = EvaluateRK4( state, deltaTime, c, acceleration );
            
            float2 dPosDt = 1.0f / 6.0f * ( a.xy + 2.0f * ( b.xy + c.xy ) + d.xy );
            float2 dVelDt = 1.0f / 6.0f * ( a.zw + 2.0f * ( b.zw + c.zw ) + d.zw );
            
            cellOffset = dPosDt * deltaTime;
            inCellBuffer[i].vel += dVelDt * deltaTime;
        }         
         
        float2 cellPos = float2( x, y ) * cellSize + cellHalfExtents + cellOffset;
        float4 cellRect = float4( cellPos - cellHalfExtents, cellPos + cellHalfExtents );
        
        float expansionVel = inCellBuffer[i].mass * density / (cellSize*cellSize);         
        float expansion = ( expansionVel * deltaTime ) / 2;
        cellRect += float4( -expansion, -expansion, expansion, expansion );
        
        inOutCellRectBuffer[i] = cellRect;
        
        int2 xyInf = floor( cellRect.xy / cellSize );
        int2 xySup = floor( cellRect.zw / cellSize );
        
        int massPropagationStride = numMassPropagationIndices + 1;        
        
        for (int y1 = xyInf.y; y1 <= xySup.y; y1++)
        {
            for (int x1 = xyInf.x; x1 <= xySup.x; x1++)
            {
                int j = y1 * width + x1;
                
                int massPropagationOffset = j * massPropagationStride;
                
                int writeIndex;
                InterlockedAdd( inOutMassPropagationBuffer[massPropagationOffset], 1, writeIndex );
                
                if( writeIndex < numMassPropagationIndices )
                {
                    inOutMassPropagationBuffer[massPropagationOffset+writeIndex+1] = i;
                }
            }
        }                   
    }
}

//////////////////////////////////////////////////////////////////////////////////////

#pragma kernel MassPropagationPass

float4 IntersectRects(float4 rect1, float4 rect2)  
{
    float xInf1 = rect1.x;
    float yInf1 = rect1.y;
    float xSup1 = rect1.z;
    float ySup1 = rect1.w;
    float xInf2 = rect2.x;
    float yInf2 = rect2.y;
    float xSup2 = rect2.z;
    float ySup2 = rect2.w;
        
    return float4
    (
        min( max( xInf1, xInf2 ), xSup2 ),
        min( max( yInf1, yInf2 ), ySup2 ),
        max( min( xSup1, xSup2 ), xInf2 ),
        max( min( ySup1, ySup2 ), yInf2 )
    );
}

float RectArea(float4 rect)
{
    return (rect.z-rect.x)*(rect.w-rect.y);
}

[numthreads(GROUPSIZE,1,1)]
void MassPropagationPass(uint3 id : SV_DispatchThreadID)
{
    int i = int(id.x);  
    
    if( i < width*height )
    {
        int y = i / width;
        int x = i - y * width;
        
        float cellExtents = float2( cellSize, cellSize );
        float cellHalfExtents = cellExtents / 2;
        
        float2 cellPos = float2( x, y ) * cellSize + cellHalfExtents;
        float4 cellRect = float4( cellPos - cellHalfExtents, cellPos + cellHalfExtents );
        
        float cellMass = 0;
        float2 cellMassVel = float2( 0, 0 ); 
        
        int massPropagationStride = numMassPropagationIndices + 1;
        int massPropagationOffset = i * massPropagationStride;
        
        int count = min( inOutMassPropagationBuffer[massPropagationOffset], numMassPropagationIndices );
        for (int j = 0; j <= count; j++)
        {
            int k = inOutMassPropagationBuffer[massPropagationOffset+j+1];            
            
            float4 otherCellRect = inOutCellRectBuffer[k];            
            float4 intersectionRect = IntersectRects( cellRect, otherCellRect );
            float intersectionRectArea = RectArea( intersectionRect );
            
            if( intersectionRectArea > EPSILON )
            {            
                float otherCellRectArea = RectArea( otherCellRect );
                float intersectionRectAreaRatio = intersectionRectArea / otherCellRectArea;
                float deltaMass = intersectionRectAreaRatio * inCellBuffer[k].mass;
                cellMass += deltaMass;
                cellMassVel += deltaMass * inCellBuffer[k].vel;
            } 
        }
        
        if( cellMass > EPSILON && i != 0 ) 
        {
            outCellBuffer[i].mass = cellMass;
            outCellBuffer[i].vel = cellMassVel / cellMass;
        }
        else
        {
            outCellBuffer[i].mass = 0;
            outCellBuffer[i].vel = float2( 0, 0 );
        }
        outCellBuffer[i].force = inCellBuffer[i].force; 
    }
}

//////////////////////////////////////////////////////////////////////////////////////

#pragma kernel InitMassSAT

[numthreads(GROUPSIZE,1,1)]
void InitMassSAT(uint3 id : SV_DispatchThreadID)
{ 
    int i = int(id.x);
    
    int length = width * height; 
        
    if( i < length )
    {
        int y = i / width;
        int x = i - y * width;
        
        float mass = inCellBuffer[i].mass;
        float weight = 1.0 + inCellBuffer[i].mass;
        float2 pos = float2( x * cellSize + cellSize / 2, y * cellSize + cellSize / 2 );   
        
        outMassSATBuffer[i] = float3( mass, pos * weight );
    }    
}

//////////////////////////////////////////////////////////////////////////////////////

#pragma kernel TransposeMassSAT

[numthreads(GROUPSIZE,1,1)]
void TransposeMassSAT(uint3 id : SV_DispatchThreadID)
{
    int i = int(id.x);
    
    if( i < width*height )
    {
        int y = i / width;
        int x = i - y * width;
        int j = x * height + y; 
    
        outMassSATBuffer[i] = inMassSATBuffer[j];
    }    
}

//////////////////////////////////////////////////////////////////////////////////////

#pragma kernel ComputeMassSAT

[numthreads(GROUPSIZE,1,1)]
void ComputeMassSAT(uint3 id : SV_DispatchThreadID)
{
    int y = int(id.x);
    
    if (y < height)
    {
        int index = y*width;
        float3 accumulatedMass = inMassSATBuffer[index]; 
        outMassSATBuffer[index] = accumulatedMass;        
        index++;
         
        for( int x=1; x<width; x++, index++)
        {
            accumulatedMass += inMassSATBuffer[index];
            outMassSATBuffer[index] = accumulatedMass;
        }
    }
}

//////////////////////////////////////////////////////////////////////////////////////

#pragma kernel ComputeRowStats

[numthreads(GROUPSIZE,1,1)]
void ComputeRowStats(uint3 id : SV_DispatchThreadID)
{
    int y = int(id.x);
    
    if (y < height)
    {
        RowStats rowStats; 
    
        int index = y*width;
        rowStats.maxMass = inCellBuffer[index].mass;
        rowStats.maxVel = length( inCellBuffer[index].vel );
        rowStats.totalMass = inCellBuffer[index].mass;
        index++;

        for( int x=1; x<width; x++, index++)
        {
            rowStats.maxMass = max( rowStats.maxMass, inCellBuffer[index].mass );
            rowStats.maxVel = max( rowStats.maxVel, length( inCellBuffer[index].vel ) );
            rowStats.totalMass += inCellBuffer[index].mass;
        }
        
        outRowStatsBuffer[y] = rowStats;        
    }
}

//////////////////////////////////////////////////////////////////////////////////////

#pragma kernel DrawMassSAT

[numthreads(GROUPSIZE,1,1)]
void DrawMassSAT(uint3 id : SV_DispatchThreadID)
{
    int i = int(id.x);
        
    if( i < width*height )
    {        
        int y = i / width;
        int x = i - y * width;        
        
        int2 xy = int2( x,y );
        
        const float Mass0 = 0.1;
        const float Mass1 = 1.0;
        const float Mass2 = 10;
        const float Mass3 = 100;
        const float Mass4 = 1000;
        const float Mass5 = 10000;
        const float Mass6 = 100000;
        
        const half4 VacuumColor = half4( 0,0,0,0 );
        const half4 Color0 = half4( 0.0625, 0, 0.5, 1 );
        const half4 Color1 = half4( 0,0,1,1 );
        const half4 Color2 = half4( 0,0.25,0.75,1 );
        const half4 Color3 = half4( 0,1,0,1 );
        const half4 Color4 = half4( 1,1,0,1 );
        const half4 Color5 = half4( 1,0,0,1 );
        const half4 Color6 = half4( 1,1,1,1 );
        
        float mass = inOutMassSATBuffer[i].x;
        if( mass < Mass0 )
        {
            renderTexture[xy] = lerp( VacuumColor, Color0, mass / Mass0 );   
        } 
        else if( mass < Mass1 )
        {
            renderTexture[xy] = lerp( Color0, Color1, (mass-Mass0) / (Mass1-Mass0) );
        }
        else if( mass < Mass2 )
        {
            renderTexture[xy] = lerp( Color1, Color2, (mass-Mass1) / (Mass2-Mass1) );
        }
        else if( mass < Mass3 )
        {
            renderTexture[xy] = lerp( Color2, Color3, (mass-Mass2) / (Mass3-Mass2) );
        }
        else if( mass < Mass4 )
        {
            renderTexture[xy] = lerp( Color3, Color4, (mass-Mass3) / (Mass4-Mass3) );
        }
        else if( mass < Mass5 )
        {
            renderTexture[xy] = lerp( Color4, Color5, (mass-Mass4) / (Mass5-Mass4) );
        }
        else 
        {
            renderTexture[xy] = lerp( Color5, Color6, (mass-Mass5) / (Mass6-Mass5) );
        }
    }
}

//////////////////////////////////////////////////////////////////////////////////////

#pragma kernel DrawMasses

[numthreads(GROUPSIZE,1,1)]
void DrawMasses(uint3 id : SV_DispatchThreadID)
{
    int i = int(id.x);
        
    if( i < width*height )
    {        
        int y = i / width;
        int x = i - y * width;        
        
        int2 xy = int2( x,y );
                
        const float Mass0 = 0.0001;
        const float Mass1 = 0.001;
        const float Mass2 = 0.01;
        const float Mass3 = 0.1;
        const float Mass4 = 1;
        const float Mass5 = 10;
        const float Mass6 = 100;
        const float Mass7 = 1000;
        
        const half4 VacuumColor = half4( 0,0,0,0 );
        const half4 Color0 = half4( 0.0625, 0, 0.5, 1 );
        const half4 Color1 = half4( 0,0,1,1 );
        const half4 Color2 = half4( 0,0.25,0.75,1 );
        const half4 Color3 = half4( 0,1,0,1 );
        const half4 Color4 = half4( 1,1,0,1 );
        const half4 Color5 = half4( 1,0.5,0,1 );
        const half4 Color6 = half4( 1,0,0,1 );
        const half4 Color7 = half4( 1,1,1,1 );
        
        if( inOutCellBuffer[i].mass < Mass0 )
        {
            renderTexture[xy] = lerp( VacuumColor, Color0, inOutCellBuffer[i].mass / Mass0 );   
        } 
        else if( inOutCellBuffer[i].mass < Mass1 )
        {
            renderTexture[xy] = lerp( Color0, Color1, (inOutCellBuffer[i].mass-Mass0) / (Mass1-Mass0) );
        }
        else if( inOutCellBuffer[i].mass < Mass2 )
        {
            renderTexture[xy] = lerp( Color1, Color2, (inOutCellBuffer[i].mass-Mass1) / (Mass2-Mass1) );
        }
        else if( inOutCellBuffer[i].mass < Mass3 )
        {
            renderTexture[xy] = lerp( Color2, Color3, (inOutCellBuffer[i].mass-Mass2) / (Mass3-Mass2) );
        }
        else if( inOutCellBuffer[i].mass < Mass4 )
        {
            renderTexture[xy] = lerp( Color3, Color4, (inOutCellBuffer[i].mass-Mass3) / (Mass4-Mass3) );
        }
        else if( inOutCellBuffer[i].mass < Mass5 )
        {
            renderTexture[xy] = lerp( Color4, Color5, (inOutCellBuffer[i].mass-Mass4) / (Mass5-Mass4) );
        }
        else if( inOutCellBuffer[i].mass < Mass6 )
        {
            renderTexture[xy] = lerp( Color5, Color6, (inOutCellBuffer[i].mass-Mass5) / (Mass6-Mass5) );
        }
        else
        {
            renderTexture[xy] = lerp( Color6, Color7, (inOutCellBuffer[i].mass-Mass6) / (Mass7-Mass6) );
        }
    }
}

//////////////////////////////////////////////////////////////////////////////////////

#pragma kernel DrawMomentums

[numthreads(GROUPSIZE,1,1)]
void DrawMomentums(uint3 id : SV_DispatchThreadID)
{
    int i = int(id.x);
        
    if( i < width*height )
    {        
        int y = i / width;
        int x = i - y * width;        
        
        int2 xy = int2( x,y );
        
        const float VelocityScale = 1.0;
       
        float2 vel = inOutCellBuffer[i].vel;
        float mag = length(vel) * inOutCellBuffer[i].mass;
        vel = normalize(vel);
        
        // LOG: 0.0000001 0.000001 0.00001 0.000   0.001   0.01    0.1     1.0    10.0   100.0  1000.0
        // LIN: 0.0563    0.0750   0.1001  0.1334  0.1779  0.2373  0.3164  0.4218  0.5625  0.75    1.0
        
        float hue = Angle360( vel, float2(1,0) ) / 360;
        float value = LogToLinear( mag, 0.0000001, 1000.0, 0.0563135147, 1.0/0.75 );
       
        //renderTexture[xy] = half4( vel, 0, 1 );
        renderTexture[xy] = half4( HSV2RGB( float3(hue,1,value) ), 1 );
        
        // legend        
        const float LegendScale = 0.25f;        
        renderTexture[xy] = DrawLegend( x, y, LegendScale, renderTexture[xy] );           
    }
}

//////////////////////////////////////////////////////////////////////////////////////

#pragma kernel DrawForces

[numthreads(GROUPSIZE,1,1)]
void DrawForces(uint3 id : SV_DispatchThreadID)
{
    int i = int(id.x);
        
    if( i < width*height )
    {        
        int y = i / width;
        int x = i - y * width;        
        
        int2 xy = int2( x,y );
       
        float2 force = inOutCellBuffer[i].force;
        float mag = length(force);
        force = normalize(force);
    
        // LOG: 0.0000001 0.000001 0.00001 0.000   0.001   0.01    0.1     1.0    10.0   100.0  1000.0
        // LIN: 0.0563    0.0750   0.1001  0.1334  0.1779  0.2373  0.3164  0.4218  0.5625  0.75    1.0
        
        float hue = Angle360( force, float2(1,0) ) / 360;                
        float value = LogToLinear( mag, 0.0000001, 1000.0, 0.0563135147, 1.0/0.75 );                 
                 
        renderTexture[xy] = half4( HSV2RGB( float3(hue,1,value) ), 1 );
        
        // legend        
        const float LegendScale = 0.25f;        
        renderTexture[xy] = DrawLegend( x, y, LegendScale, renderTexture[xy] );
    }
}

//////////////////////////////////////////////////////////////////////////////////////

#pragma kernel DrawSyntheticImage

[numthreads(GROUPSIZE,1,1)]
void DrawSyntheticImage(uint3 id : SV_DispatchThreadID)
{
    int i = int(id.x);
        
    if( i < width*height )
    {        
        int y = i / width;
        int x = i - y * width;        
        
        int2 xy = int2( x,y );
        
        half4 result = half4(0,0,0,1);
        result.r = LogToLinear( inOutCellBuffer[i].mass, 0.0000001, 1000.0, 0.0563135147, 1.0/0.75 );                
        result.g = LogToLinear( length(inOutCellBuffer[i].vel) * inOutCellBuffer[i].mass, 0.0000001, 1000.0, 0.0563135147, 1.0/0.75 );
        result.b = LogToLinear( length(inOutCellBuffer[i].force), 0.0000001, 1000.0, 0.0563135147, 1.0/0.75 );
        
        renderTexture[xy] = result; 
    }
}